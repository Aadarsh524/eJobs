{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\Inbox.js\";\nimport React, { Component } from 'react';\nimport \"../../Css/Inbox.css\";\nimport NavName from './NavName';\nimport Chat from './Chat';\nimport Spinner from '../../Spinner.js';\nimport InboxSideBar from './InboxSideBar';\nimport { getUserRooms } from '../../actions/messageAction.js';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Inbox extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: ''\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUserRooms();\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newMessage = {\n      message: this.state.email\n    };\n    this.props.sendMessage(newMessage);\n  }\n\n  render() {\n    const {\n      messages,\n      messageRooms\n    } = this.props.message;\n    const {\n      allUsers\n    } = this.props.auth;\n    let allRooms;\n    let chatArea;\n    ;\n\n    if (messageRooms === null) {\n      allRooms = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }, this);\n    } else {\n      allRooms = /*#__PURE__*/_jsxDEV(InboxSideBar, {\n        allUsers: allUsers,\n        messageRooms: messageRooms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }, this);\n    }\n\n    if (messages === null) {\n      chatArea = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this);\n    } else {\n      chatArea = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inbox\",\n      children: [/*#__PURE__*/_jsxDEV(NavName, {\n        pageName: \"Inbox\",\n        pageDescription: \"Make a conversation with freelancer or client.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inbox_body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"roomList\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"All Rooms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 23\n          }, this), allRooms]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messageBox\",\n          children: chatArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nInbox.propTypes = {\n  messageRooms: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  message: state.message,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getUserRooms\n})(Inbox);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/Inbox.js"],"names":["React","Component","NavName","Chat","Spinner","InboxSideBar","getUserRooms","PropTypes","connect","Inbox","constructor","state","message","onChange","bind","onSubmit","componentDidMount","props","e","setState","target","name","value","preventDefault","newMessage","email","sendMessage","render","messages","messageRooms","allUsers","auth","allRooms","chatArea","propTypes","func","isRequired","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,qBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAGA,MAAMC,KAAN,SAAoBR,SAApB,CAA8B;AACzBS,EAAAA,WAAW,GAAE;AACT;AACI,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGJ,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AAEH;;AACDE,EAAAA,iBAAiB,GAAE;AAEf,SAAKC,KAAL,CAAWX,YAAX;AAEJ;;AACCO,EAAAA,QAAQ,CAACK,CAAD,EAAG;AACR,SAAKC,QAAL,CAAc;AAAC,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA3B,KAAd;AACH;;AACAP,EAAAA,QAAQ,CAACG,CAAD,EAAG;AACRA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAMC,UAAU,GAAG;AACjBZ,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWc;AADH,KAAnB;AAGA,SAAKR,KAAL,CAAWS,WAAX,CAAuBF,UAAvB;AACH;;AACFG,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,QAAF;AAAWC,MAAAA;AAAX,QAA6B,KAAKZ,KAAL,CAAWL,OAA9C;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAe,KAAKb,KAAL,CAAWc,IAAhC;AACJ,QAAIC,QAAJ;AACA,QAAIC,QAAJ;AACH;;AAEG,QAAIJ,YAAY,KAAK,IAArB,EAA2B;AACzBG,MAAAA,QAAQ,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,KAFD,MAGK;AACHA,MAAAA,QAAQ,gBAAG,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEF,QAAxB;AAAkC,QAAA,YAAY,EAAED;AAAhD;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;;AAEJ,QAAID,QAAQ,KAAK,IAAjB,EAAuB;AAClBK,MAAAA,QAAQ,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,KAFJ,MAGQ;AACHA,MAAAA,QAAQ,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;;AAGG,wBACK;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,OAAlB;AAA0B,QAAA,eAAe,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEG;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGD,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,oBACEC;AADF;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAeH;;AA9DyB;;AAgE9BxB,KAAK,CAACyB,SAAN,GAAkB;AACZL,EAAAA,YAAY,EAAEtB,SAAS,CAAC4B,IAAV,CAAeC;AADjB,CAAlB;;AAIA,MAAMC,eAAe,GAAI1B,KAAD,KAAY;AAC/BC,EAAAA,OAAO,EAAED,KAAK,CAACC,OADgB;AAE/BmB,EAAAA,IAAI,EAAEpB,KAAK,CAACoB;AAFmB,CAAZ,CAAxB;;AAMA,eAAevB,OAAO,CAAC6B,eAAD,EAAkB;AAAE/B,EAAAA;AAAF,CAAlB,CAAP,CAA4CG,KAA5C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../../Css/Inbox.css\";\r\nimport NavName from './NavName'\r\nimport Chat from './Chat'\r\nimport Spinner from '../../Spinner.js'\r\n\r\nimport InboxSideBar from './InboxSideBar'\r\nimport { getUserRooms } from '../../actions/messageAction.js';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Inbox extends Component {\r\n     constructor(){\r\n         super();\r\n             this.state = {\r\n                 message: '',\r\n             };\r\n         this.onChange = this.onChange.bind(this);\r\n         this.onSubmit = this.onSubmit.bind(this);\r\n\r\n     }\r\n     componentDidMount(){\r\n       \r\n         this.props.getUserRooms();\r\n\r\n    }\r\n      onChange(e){\r\n         this.setState({[e.target.name]: e.target.value});\r\n     }\r\n      onSubmit(e){\r\n         e.preventDefault();   \r\n         const newMessage = {\r\n           message: this.state.email,\r\n         };\r\n         this.props.sendMessage(newMessage);\r\n     }\r\n    render() {\r\n        const { messages,messageRooms  } = this.props.message;\r\n        const { allUsers } = this.props.auth;\r\n    let allRooms;\r\n    let chatArea;\r\n ;\r\n\r\n    if (messageRooms === null) {\r\n      allRooms = <Spinner />;\r\n    } \r\n    else {\r\n      allRooms = <InboxSideBar allUsers={allUsers} messageRooms={messageRooms}/>;\r\n    }\r\n   \r\n if (messages === null) {\r\n      chatArea = <Spinner />;\r\n    } \r\n    else {\r\n      chatArea = <Spinner />;\r\n    }\r\n   \r\n     \r\n        return (\r\n             <div className=\"inbox\">\r\n                 <NavName pageName=\"Inbox\" pageDescription=\"Make a conversation with freelancer or client.\"  />\r\n                <div className=\"inbox_body\">\r\n                    <div className=\"roomList\">\r\n                      <h4>All Rooms</h4>\r\n                      {allRooms}\r\n                    </div>\r\n                    <div className=\"messageBox\">\r\n                     {chatArea}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nInbox.propTypes = {\r\n      messageRooms: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n     message: state.message,\r\n     auth: state.auth,\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, { getUserRooms  })(Inbox);\r\n"]},"metadata":{},"sourceType":"module"}