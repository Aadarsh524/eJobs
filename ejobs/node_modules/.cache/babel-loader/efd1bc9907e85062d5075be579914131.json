{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  axios.get('http://localhost:5000/authenticate').then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(err.response.data);\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = formData => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:3000/users', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(error.msg, 'danger'));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post('http://localhost:5000/login', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(error.msg, 'danger'));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","get","then","res","type","payload","data","catch","err","response","register","formData","post","errors","forEach","error","msg","login","email","password","body","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,QAQO,SARP,C,CAUA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/CT,EAAAA,KAAK,CACDU,GADJ,CACQ,oCADR,EAEIC,IAFJ,CAESC,GAAG,IACPH,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEV,WADC;AAEPW,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,GAAD,CAHb,EAQIC,KARJ,CAQUC,GAAG,IAAI;AACZR,IAAAA,QAAQ,CAACQ,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAR;AACAN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD,GAbJ;AAcA,CAfM,C,CAiBP;;AACA,OAAO,MAAMe,QAAQ,GAAGC,QAAQ,IAAI,MAAMX,QAAN,IAAkB;AACpD,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACqB,IAAN,CAAW,6BAAX,EAA0CD,QAA1C,CAAlB;AAEAX,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEZ,gBADC;AAEPa,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,KAAD,CAAR;AAIAN,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GARD,CAQE,OAAOS,GAAP,EAAY;AACZ,UAAMK,MAAM,GAAGL,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBO,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIf,QAAQ,CAACe,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAhC;AACD;;AAEDhB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CApBM,C,CAsBP;;AACA,OAAO,MAAMwB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMnB,QAAN,IAAkB;AAC1D,QAAMoB,IAAI,GAAG;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;;AAEA,MAAI;AACF,UAAMhB,GAAG,GAAG,MAAMZ,KAAK,CAACqB,IAAN,CAAW,6BAAX,EAA0CQ,IAA1C,CAAlB;AAEApB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,aADC;AAEPS,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GATD,CASE,OAAOS,GAAP,EAAY;AACZ,UAAMK,MAAM,GAAGL,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBO,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIf,QAAQ,CAACe,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAhC;AACD;;AAEDhB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAGD;AACF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMwB,MAAM,GAAG,OAAO;AAAEjB,EAAAA,IAAI,EAAEN;AAAR,CAAP,CAAf","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT\r\n} from './types';\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n axios\r\n    .get('http://localhost:5000/authenticate',)\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(err.response.data);\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n// Register User\r\nexport const register = formData => async dispatch => {\r\n  try {\r\n    const res = await axios.post('http://localhost:3000/users', formData);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(error.msg, 'danger'));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async dispatch => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/login', body);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(error.msg, 'danger'));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => ({ type: LOGOUT });"]},"metadata":{},"sourceType":"module"}