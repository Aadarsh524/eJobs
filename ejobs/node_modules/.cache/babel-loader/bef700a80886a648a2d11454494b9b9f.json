{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\InboxSmall.js\";\nimport React, { Component } from 'react';\nimport \"../../Css/InboxSmall.css\";\nimport NavName from './NavName';\nimport Chat from './Chat';\nimport InboxSideBar from './InboxSideBar';\nimport { getUserRooms } from '../../actions/messageAction.js';\nimport { SiGooglemessages } from \"react-icons/si\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Inbox extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: ''\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUserRooms();\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newMessage = {\n      message: this.state.email\n    };\n    this.props.sendMessage(newMessage);\n  }\n\n  render() {\n    const {\n      messages,\n      messageRooms\n    } = this.props.message;\n    const {\n      allUsers,\n      user\n    } = this.props.auth;\n    let allRooms;\n    let chatArea;\n\n    if (messageRooms === null) {\n      allRooms = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noRoom\",\n        children: \"LOADING...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this);\n    } else {\n      allRooms = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inboxSideBar\",\n        children: messageRooms.map(roomList => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: this.onSeeMessageClick.bind(this, roomList.otherPerson),\n            className: \"messagedUser\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8ZmFjZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&w=1000&q=80\",\n              alt: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: allUsers.map((users, i) => users._id === roomList.otherPerson ? /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"roomUser\",\n                children: users.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 70\n              }, this) : null)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (messages === null) {\n      chatArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatMessage\",\n        children: [/*#__PURE__*/_jsxDEV(SiGooglemessages, {\n          style: {\n            color: 'black',\n            fontSize: 40,\n            marginRight: 25\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Click on any chat rooms to see message.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }, this);\n    } else {\n      chatArea = /*#__PURE__*/_jsxDEV(Chat, {\n        messages: messages,\n        user: user,\n        allUsers: allUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inbox\",\n      children: [/*#__PURE__*/_jsxDEV(NavName, {\n        pageName: \"Inbox\",\n        pageDescription: \"Make a conversation with freelancer or client.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inbox_body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"roomList\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"All Rooms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 23\n          }, this), allRooms]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nInbox.propTypes = {\n  messageRooms: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  message: state.message,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getUserRooms\n})(Inbox);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/InboxSmall.js"],"names":["React","Component","NavName","Chat","InboxSideBar","getUserRooms","SiGooglemessages","PropTypes","connect","Inbox","constructor","state","message","onChange","bind","onSubmit","componentDidMount","props","e","setState","target","name","value","preventDefault","newMessage","email","sendMessage","render","messages","messageRooms","allUsers","user","auth","allRooms","chatArea","map","roomList","onSeeMessageClick","otherPerson","users","i","_id","color","fontSize","marginRight","propTypes","func","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../../Css/InboxSmall.css\";\r\nimport NavName from './NavName'\r\nimport Chat from './Chat'\r\nimport InboxSideBar from './InboxSideBar'\r\nimport { getUserRooms } from '../../actions/messageAction.js';\r\nimport {  SiGooglemessages } from \"react-icons/si\";\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Inbox extends Component {\r\n     constructor(){\r\n         super();\r\n             this.state = {\r\n                 message: '',\r\n             };\r\n         this.onChange = this.onChange.bind(this);\r\n         this.onSubmit = this.onSubmit.bind(this);\r\n\r\n     }\r\n     componentDidMount(){\r\n       \r\n         this.props.getUserRooms();\r\n\r\n    }\r\n      onChange(e){\r\n         this.setState({[e.target.name]: e.target.value});\r\n     }\r\n      onSubmit(e){\r\n         e.preventDefault();   \r\n         const newMessage = {\r\n           message: this.state.email,\r\n         };\r\n         this.props.sendMessage(newMessage);\r\n     }\r\n    render() {\r\n        const { messages,messageRooms  } = this.props.message;\r\n        const { allUsers, user } = this.props.auth;\r\n    let allRooms;\r\n    let chatArea;\r\n    if (messageRooms === null) {\r\n      allRooms = <div className=\"noRoom\">LOADING...</div>;\r\n    } \r\n    else {\r\n      allRooms =   <div className=\"inboxSideBar\"> \r\n              \r\n             {messageRooms.map(roomList =>\r\n                    <div>\r\n                    <div onClick={this.onSeeMessageClick.bind(this, roomList.otherPerson)}   className=\"messagedUser\"  >\r\n                              <img src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8ZmFjZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&w=1000&q=80\" alt=\"avatar\" />\r\n                              <p>{allUsers.map((users, i) =>\r\n                              users._id === roomList.otherPerson ? ( <h5 className=\"roomUser\">{users.email}</h5>): null  \r\n                          )}</p>\r\n\r\n                    </div>\r\n                        </div>\r\n              )}\r\n            </div>;\r\n    }\r\n   \r\n if (messages === null) {\r\n      chatArea = <div className=\"chatMessage\">\r\n      <SiGooglemessages style={{color: 'black',fontSize:40, marginRight:25}}/>\r\n        <h5>Click on any chat rooms to see message.</h5>\r\n      </div>;\r\n    } \r\n    else {\r\n      chatArea = <Chat messages={messages} user={user} allUsers={allUsers} /> ;\r\n    }\r\n   \r\n     \r\n        return (\r\n             <div className=\"inbox\">\r\n                 <NavName pageName=\"Inbox\" pageDescription=\"Make a conversation with freelancer or client.\"  />\r\n                <div className=\"inbox_body\">\r\n                    <div className=\"roomList\">\r\n                      <h4>All Rooms</h4>\r\n                      {allRooms}\r\n                    </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nInbox.propTypes = {\r\n      messageRooms: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n     message: state.message,\r\n     auth: state.auth,\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, { getUserRooms  })(Inbox);\r\n"]},"metadata":{},"sourceType":"module"}