{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken.js';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, GET_ALL_USERS } from './types';\nimport { clearErrors } from \"./error.js\";\nimport { setMessageEmpty, setMessageRoomEmpty } from \"./messageAction.js\";\nexport const getAllUsers = () => dispatch => {\n  axios.get('http://localhost:5000/getAllUsers').then(res => dispatch({\n    type: GET_ALL_USERS,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Register User\n\nexport const register = (userData, history) => dispatch => {\n  axios.post('http://localhost:5000/register', userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const login = userData => dispatch => {\n  axios.post('http://localhost:5000/login', userData).then(res => {\n    const {\n      token\n    } = res.data; //Set token to local storage\n\n    localStorage.setItem('jwtToken', token); //set token to auth header\n\n    setAuthToken(token); //Decode token to get user data\n\n    const decoded = jwt_decode(token); //Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //SET login user\n\nconst setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\nexport default setCurrentUser;\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken'); //remove auth header  for future request\n\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  dispatch(clearErrors({}));\n  dispatch(setMessageEmpty({}));\n  dispatch(setMessageRoomEmpty({}));\n};","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/actions/authAction.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","GET_ALL_USERS","clearErrors","setMessageEmpty","setMessageRoomEmpty","getAllUsers","dispatch","get","then","res","type","payload","data","catch","err","response","register","userData","history","post","push","login","token","localStorage","setItem","decoded","setCurrentUser","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGGC,aAHH,QAIO,SAJP;AAKA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,oBAArD;AAIA,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAI;AAC3CV,EAAAA,KAAK,CACJW,GADD,CACK,mCADL,EAECC,IAFD,CAEMC,GAAG,IAAIH,QAAQ,CAAC;AACnBI,IAAAA,IAAI,EAAET,aADa;AAEnBU,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFO,GAAD,CAFrB,EAMCC,KAND,CAMOC,GAAG,IACTR,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEX,UADC;AAEPY,IAAAA,OAAO,EAACG,GAAG,CAACC,QAAJ,CAAaH;AAFd,GAAD,CAPT;AAWF,CAZM,C,CAeP;;AAEA,OAAO,MAAMI,QAAQ,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAwBZ,QAAQ,IAAI;AACzDV,EAAAA,KAAK,CACJuB,IADD,CACM,gCADN,EACwCF,QADxC,EAECT,IAFD,CAEMC,GAAG,IAAGS,OAAO,CAACE,IAAR,CAAa,QAAb,CAFZ,EAGCP,KAHD,CAGOC,GAAG,IACTR,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEX,UADC;AAEPY,IAAAA,OAAO,EAACG,GAAG,CAACC,QAAJ,CAAaH;AAFd,GAAD,CAJT;AAQF,CATM;AAWP,OAAO,MAAMS,KAAK,GAAIJ,QAAD,IAAeX,QAAQ,IAAI;AAC7CV,EAAAA,KAAK,CACJuB,IADD,CACM,6BADN,EACqCF,QADrC,EAECT,IAFD,CAEMC,GAAG,IAAG;AACX,UAAM;AAAEa,MAAAA;AAAF,QAAYb,GAAG,CAACG,IAAtB,CADW,CAEX;;AACAW,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,KAAhC,EAHW,CAIX;;AACAzB,IAAAA,YAAY,CAACyB,KAAD,CAAZ,CALW,CAMX;;AACA,UAAMG,OAAO,GAAG3B,UAAU,CAACwB,KAAD,CAA1B,CAPW,CAQX;;AACAhB,IAAAA,QAAQ,CAACoB,cAAc,CAACD,OAAD,CAAf,CAAR;AACA,GAZD,EAaCZ,KAbD,CAaOC,GAAG,IACTR,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEX,UADC;AAEPY,IAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH;AAFf,GAAD,CAdT;AAkBF,CAnBM,C,CAqBP;;AACC,MAAMc,cAAc,GAAID,OAAO,IAAG;AACjC,SAAM;AACJf,IAAAA,IAAI,EAAEV,gBADF;AAEJW,IAAAA,OAAO,EAAEc;AAFL,GAAN;AAKD,CANA;;AAQD,eAAeC,cAAf;AAGA,OAAO,MAAMC,MAAM,GAAI,MAAMrB,QAAQ,IAAI;AAEvCiB,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFuC,CAGvC;;AACA/B,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAS,EAAAA,QAAQ,CAACoB,cAAc,CAAC,EAAD,CAAf,CAAR;AACApB,EAAAA,QAAQ,CAACJ,WAAW,CAAC,EAAD,CAAZ,CAAR;AACAI,EAAAA,QAAQ,CAACH,eAAe,CAAC,EAAD,CAAhB,CAAR;AACAG,EAAAA,QAAQ,CAACF,mBAAmB,CAAC,EAAD,CAApB,CAAR;AAGD,CAXM","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken.js';\r\nimport jwt_decode from 'jwt-decode';\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n   GET_ALL_USERS\r\n} from './types';\r\nimport { clearErrors } from \"./error.js\"\r\nimport { setMessageEmpty, setMessageRoomEmpty } from \"./messageAction.js\"\r\n\r\n\r\n\r\nexport const getAllUsers = () =>  dispatch => {\r\n   axios\r\n   .get('http://localhost:5000/getAllUsers')\r\n   .then(res=>  dispatch({\r\n      type: GET_ALL_USERS,\r\n      payload:res.data\r\n    }))\r\n   .catch(err => \r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload:err.response.data\r\n    }))\r\n};\r\n\r\n\r\n// Register User\r\n\r\nexport const register = (userData, history) =>  dispatch => {\r\n   axios\r\n   .post('http://localhost:5000/register', userData)\r\n   .then(res=> history.push(\"/login\"))\r\n   .catch(err => \r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload:err.response.data\r\n    }))\r\n};\r\n\r\nexport const login = (userData) =>  dispatch => {\r\n   axios\r\n   .post('http://localhost:5000/login', userData)\r\n   .then(res=> {\r\n    const { token } = res.data;\r\n    //Set token to local storage\r\n    localStorage.setItem('jwtToken',token);\r\n    //set token to auth header\r\n    setAuthToken(token);\r\n    //Decode token to get user data\r\n    const decoded = jwt_decode(token);\r\n    //Set current user\r\n    dispatch(setCurrentUser(decoded));\r\n   })\r\n   .catch(err => \r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    }))\r\n};\r\n\r\n//SET login user\r\n const setCurrentUser =  decoded =>{\r\n  return{\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n\r\n  }\r\n}\r\n\r\nexport default setCurrentUser;\r\n\r\n\r\nexport const logout =  () => dispatch => {\r\n \r\n  localStorage.removeItem('jwtToken');\r\n  //remove auth header  for future request\r\n  setAuthToken(false);\r\n  dispatch(setCurrentUser({}));\r\n  dispatch(clearErrors({}));\r\n  dispatch(setMessageEmpty({}));\r\n  dispatch(setMessageRoomEmpty({}));\r\n\r\n\r\n}\r\n;\r\n"]},"metadata":{},"sourceType":"module"}