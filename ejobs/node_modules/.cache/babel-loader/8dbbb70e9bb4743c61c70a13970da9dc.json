{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\Applicants.js\";\nimport React, { Component } from 'react';\nimport \"../../Css/Profile.css\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getAppliedProject } from '../../actions/projectAction.js';\nimport Spinner from '../../Spinner.js';\nimport Applicant from './Applicant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Applicants extends Component {\n  componentDidMount() {\n    this.props.getAppliedProject();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      project: nextProps.project\n    });\n  }\n\n  render() {\n    const {\n      appliedProject,\n      loading\n    } = this.props.project;\n    console.log(appliedProject);\n    let Allprojects;\n\n    if (appliedProject === null || loading) {\n      Allprojects = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this);\n    } else {\n      Allprojects = /*#__PURE__*/_jsxDEV(Applicant, {\n        project: appliedProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Allprojects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nApplicants.propTypes = {\n  showAllProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {\n  getAppliedProject\n})(Applicants);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/Applicants.js"],"names":["React","Component","connect","PropTypes","getAppliedProject","Spinner","Applicant","Applicants","componentDidMount","props","componentWillReceiveProps","nextProps","setState","project","render","appliedProject","loading","console","log","Allprojects","propTypes","showAllProject","func","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,uBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAUC,iBAAV,QAAmC,gCAAnC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAGC,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAEhCO,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWL,iBAAX;AACH;;AACDM,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AACxB,SAAKC,QAAL,CAAc;AACTC,MAAAA,OAAO,EAAEF,SAAS,CAACE;AADV,KAAd;AAIV;;AACFC,EAAAA,MAAM,GAAG;AACF,UAAM;AAAEC,MAAAA,cAAF;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKP,KAAL,CAAWI,OAA9C;AACFI,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACL,QAAII,WAAJ;;AAEA,QAAIJ,cAAc,KAAK,IAAnB,IAA2BC,OAA/B,EAAwC;AACtCG,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAd;AACD,KAFD,MAEO;AACJA,MAAAA,WAAW,gBAAE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,cAAb;AACF;;AAEG,wBACI;AAAA,gBACII;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA3B+B;;AA+BpCZ,UAAU,CAACa,SAAX,GAAuB;AAClBC,EAAAA,cAAc,EAAElB,SAAS,CAACmB,IAAV,CAAeC;AADb,CAAvB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCZ,EAAAA,OAAO,EAAEY,KAAK,CAACZ;AADmB,CAAZ,CAAxB;;AAIA,eAAeX,OAAO,CAACsB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAAiDG,UAAjD,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../../Css/Profile.css\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {  getAppliedProject } from '../../actions/projectAction.js'\r\nimport Spinner from '../../Spinner.js'\r\nimport Applicant from './Applicant';\r\n\r\n\r\n class Applicants extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getAppliedProject();\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n                this.setState({\r\n                     project: nextProps.project,\r\n                });\r\n                \r\n     }\r\n    render() {\r\n           const { appliedProject,loading } = this.props.project;\r\n         console.log(appliedProject);\r\n    let Allprojects;\r\n\r\n    if (appliedProject === null || loading) {\r\n      Allprojects = <Spinner />;\r\n    } else {\r\n       Allprojects =<Applicant project={appliedProject} />;\r\n    }\r\n          \r\n        return (\r\n            <div >\r\n               {Allprojects}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nApplicants.propTypes = {\r\n     showAllProject: PropTypes.func.isRequired,\r\n  \r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  project: state.project,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getAppliedProject  })(Applicants);\r\n"]},"metadata":{},"sourceType":"module"}