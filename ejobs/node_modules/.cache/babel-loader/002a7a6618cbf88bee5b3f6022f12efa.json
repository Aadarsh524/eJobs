{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport \"../../Css/Dashboard.css\";\nimport { connect } from 'react-redux';\nimport NavName from './NavName';\nimport Project from './Project';\nimport Spinner from '../../Spinner.js';\nimport { showAllProject, getClientProject } from '../../actions/projectAction.js';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.project) {\n      this.setState({\n        project: nextProps.project,\n        auth: nextProps.auth\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.props.showAllProject();\n    this.props.getClientProject();\n  }\n\n  render() {\n    const {\n      project,\n      loading\n    } = this.props.project;\n    const {\n      user\n    } = this.props.auth;\n    let Allprojects;\n\n    if (project === null || loading) {\n      Allprojects = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this);\n    } else {\n      Allprojects = /*#__PURE__*/_jsxDEV(Project, {\n        project: project,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(NavName, {\n        pageName: \"DashBoard\",\n        pageDescription: \"See all the project listed on eJob. And Apply.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashBoard_body\",\n        children: Allprojects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nDashboard.propTypes = {\n  showAllProject: PropTypes.func.isRequired,\n  getClientProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {\n  showAllProject,\n  getClientProject\n})(Dashboard);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/Dashboard.js"],"names":["React","Component","connect","NavName","Project","Spinner","showAllProject","getClientProject","PropTypes","Dashboard","componentWillReceiveProps","nextProps","project","setState","auth","componentDidMount","props","render","loading","user","Allprojects","propTypes","func","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,cAAT,EAAwBC,gBAAxB,QAAgD,gCAAhD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEC,MAAMC,SAAN,SAAwBR,SAAxB,CAAkC;AAI9BS,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAC7B,QAAGA,SAAS,CAACC,OAAb,EAAqB;AACjB,WAAKC,QAAL,CAAc;AACVD,QAAAA,OAAO,EAAED,SAAS,CAACC,OADT;AAEVE,QAAAA,IAAI,EAAEH,SAAS,CAACG;AAFN,OAAd;AAKH;AACP;;AACHC,EAAAA,iBAAiB,GAAE;AACd,SAAKC,KAAL,CAAWV,cAAX;AACA,SAAKU,KAAL,CAAWT,gBAAX;AACH;;AACDU,EAAAA,MAAM,GAAG;AAEJ,UAAM;AAAEL,MAAAA,OAAF;AAAWM,MAAAA;AAAX,QAAuB,KAAKF,KAAL,CAAWJ,OAAxC;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,KAAKH,KAAL,CAAWF,IAA5B;AAEL,QAAIM,WAAJ;;AAEA,QAAIR,OAAO,KAAK,IAAZ,IAAoBM,OAAxB,EAAiC;AAC/BE,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAS,QAAA,OAAO,EAAER,OAAlB;AAA2B,QAAA,IAAI,EAAEO;AAAjC;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AACG,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,WAAlB;AAA8B,QAAA,eAAe,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBACKC;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AArC8B;;AAuCnCX,SAAS,CAACY,SAAV,GAAsB;AACpBf,EAAAA,cAAc,EAAEE,SAAS,CAACc,IAAV,CAAeC,UADX;AAEpBhB,EAAAA,gBAAgB,EAAEC,SAAS,CAACc,IAAV,CAAeC;AAFb,CAAtB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCX,EAAAA,IAAI,EAAEW,KAAK,CAACX,IADsB;AAElCF,EAAAA,OAAO,EAAEa,KAAK,CAACb;AAFmB,CAAZ,CAAxB;;AAIA,eAAeV,OAAO,CAACsB,eAAD,EAAkB;AAAElB,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAlB,CAAP,CAA8DE,SAA9D,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../../Css/Dashboard.css\";\r\nimport { connect } from 'react-redux';\r\nimport NavName from './NavName'\r\nimport Project from './Project';\r\nimport Spinner from '../../Spinner.js'\r\nimport { showAllProject,getClientProject } from '../../actions/projectAction.js'\r\nimport PropTypes from 'prop-types';\r\n\r\n class Dashboard extends Component {\r\n   \r\n\r\n\r\n     componentWillReceiveProps(nextProps){\r\n            if(nextProps.project){\r\n                this.setState({\r\n                    project: nextProps.project,\r\n                    auth: nextProps.auth\r\n\r\n                });\r\n            }\r\n     }\r\n   componentDidMount(){\r\n        this.props.showAllProject();\r\n        this.props.getClientProject();\r\n    }\r\n    render() {\r\n\r\n         const { project, loading } = this.props.project;\r\n         const { user } = this.props.auth;\r\n         \r\n    let Allprojects;\r\n\r\n    if (project === null || loading) {\r\n      Allprojects = <Spinner />;\r\n    } else {\r\n      Allprojects = <Project project={project} user={user}/>;\r\n    }\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <NavName pageName=\"DashBoard\" pageDescription=\"See all the project listed on eJob. And Apply.\"  />\r\n                <div className=\"dashBoard_body\">\r\n                    {Allprojects}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nDashboard.propTypes = {\r\n  showAllProject: PropTypes.func.isRequired,\r\n  getClientProject: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  project: state.project\r\n});\r\nexport default connect(mapStateToProps, { showAllProject, getClientProject})(Dashboard);\r\n"]},"metadata":{},"sourceType":"module"}