{"ast":null,"code":"import axios from 'axios';\nimport { GET_MESSAGES, MESSAGE_LOADING, GET_MESSAGE_ROOMS, CLEAR_MESSAGE, GET_ROOM_NAME } from '../actions/types';\nexport const makeChat = otherPerson => dispatch => {\n  axios.post('http://localhost:5000/makeChat', {\n    otherPerson\n  }).then(res => dispatch({\n    type: GET_MESSAGES,\n    payload: res.data\n  })).catch(err => dispatch({}));\n};\nexport const sendMessage = (newMessage, history) => dispatch => {\n  axios.post(\"http://localhost:5000/sendMessage\", newMessage).then(res => history.push('/')).catch(err => dispatch({}));\n};\nexport const getAllMessages = id => dispatch => {\n  dispatch(setMessageEmpty());\n  dispatch(setMessageLoading());\n  axios.get(\"http://localhost:5000/getAllMessages\").then(res => dispatch({\n    type: GET_MESSAGES,\n    payload: res.data\n  })).catch(err => dispatch({}));\n};\nexport const getUserRooms = () => dispatch => {\n  dispatch(setMessageLoading());\n  axios.get('http://localhost:5000/getUserRooms').then(res => dispatch({\n    type: GET_MESSAGE_ROOMS,\n    payload: res.data\n  })).catch(err => dispatch({}));\n};\nexport const setMessageLoading = () => {\n  return {\n    type: MESSAGE_LOADING\n  };\n};\nexport const getRoomName = id => dispatch => {\n  dispatch({\n    type: GET_ROOM_NAME,\n    payload: id\n  });\n};\nexport const setMessageEmpty = () => {\n  return {\n    type: CLEAR_MESSAGE\n  };\n};","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/actions/messageAction.js"],"names":["axios","GET_MESSAGES","MESSAGE_LOADING","GET_MESSAGE_ROOMS","CLEAR_MESSAGE","GET_ROOM_NAME","makeChat","otherPerson","dispatch","post","then","res","type","payload","data","catch","err","sendMessage","newMessage","history","push","getAllMessages","id","setMessageEmpty","setMessageLoading","get","getUserRooms","getRoomName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,YADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,aALF,QAMO,kBANP;AAUA,OAAO,MAAMC,QAAQ,GAAIC,WAAD,IAAkBC,QAAQ,IAAI;AACpDR,EAAAA,KAAK,CAACS,IAAN,CAAW,gCAAX,EAA6C;AAAEF,IAAAA;AAAF,GAA7C,EACCG,IADD,CACMC,GAAG,IACNH,QAAQ,CAAC;AACFI,IAAAA,IAAI,EAAGX,YADL;AAEFY,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFV,GAAD,CAFX,EAMEC,KANF,CAMQC,GAAG,IACTR,QAAQ,CAAC,EAAD,CAPV;AASD,CAVM;AAcP,OAAO,MAAMS,WAAW,GAAG,CAACC,UAAD,EAAYC,OAAZ,KAAyBX,QAAQ,IAAI;AAC9DR,EAAAA,KAAK,CAACS,IAAN,CAAW,mCAAX,EAAgDS,UAAhD,EACCR,IADD,CACMC,GAAG,IAAGQ,OAAO,CAACC,IAAR,CAAa,GAAb,CADZ,EAEEL,KAFF,CAEQC,GAAG,IACTR,QAAQ,CAAC,EAAD,CAHV;AAMD,CAPM;AAUP,OAAO,MAAMa,cAAc,GAAIC,EAAD,IAASd,QAAQ,IAAI;AAChDA,EAAAA,QAAQ,CAACe,eAAe,EAAhB,CAAR;AACAf,EAAAA,QAAQ,CAACgB,iBAAiB,EAAlB,CAAR;AACDxB,EAAAA,KAAK,CAACyB,GAAN,CAAU,sCAAV,EACCf,IADD,CACMC,GAAG,IACPH,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEX,YADD;AAELY,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFP,GAAD,CAFV,EAMGC,KANH,CAMSC,GAAG,IACNR,QAAQ,CAAC,EAAD,CAPd;AASD,CAZM;AAgBP,OAAO,MAAMkB,YAAY,GAAG,MAAOlB,QAAQ,IAAI;AAC7CA,EAAAA,QAAQ,CAACgB,iBAAiB,EAAlB,CAAR;AACAxB,EAAAA,KAAK,CAACyB,GAAN,CAAU,oCAAV,EACCf,IADD,CACMC,GAAG,IACPH,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAET,iBADD;AAELU,IAAAA,OAAO,EAACF,GAAG,CAACG;AAFP,GAAD,CAFV,EAMGC,KANH,CAMSC,GAAG,IACNR,QAAQ,CAAC,EAAD,CAPd;AASD,CAXM;AAYP,OAAO,MAAMgB,iBAAiB,GAAG,MAAK;AACjC,SAAM;AACFZ,IAAAA,IAAI,EAAEV;AADJ,GAAN;AAGJ,CAJM;AAKP,OAAO,MAAMyB,WAAW,GAAIL,EAAD,IAAQd,QAAQ,IAAG;AACzCA,EAAAA,QAAQ,CAAC;AACNI,IAAAA,IAAI,EAAEP,aADA;AAENQ,IAAAA,OAAO,EAAES;AAFH,GAAD,CAAR;AAIJ,CALM;AAOP,OAAO,MAAMC,eAAe,GAAE,MAAK;AAC9B,SAAM;AACFX,IAAAA,IAAI,EAAER;AADJ,GAAN;AAGJ,CAJM","sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n  GET_MESSAGES,\r\n  MESSAGE_LOADING,\r\n  GET_MESSAGE_ROOMS,\r\n  CLEAR_MESSAGE,\r\n  GET_ROOM_NAME\r\n} from '../actions/types';\r\n\r\n\r\n\r\nexport const makeChat = (otherPerson) =>  dispatch => {\r\n  axios.post('http://localhost:5000/makeChat', { otherPerson })\r\n  .then(res=> \r\n     dispatch({\r\n            type : GET_MESSAGES,\r\n            payload:res.data\r\n        }))\r\n   .catch(err => \r\n    dispatch({\r\n    }))\r\n};\r\n\r\n\r\n\r\nexport const sendMessage = (newMessage,history) =>  dispatch => {\r\n  axios.post(\"http://localhost:5000/sendMessage\" ,newMessage)\r\n  .then(res=> history.push('/'))\r\n   .catch(err => \r\n    dispatch({\r\n\r\n    }))\r\n};\r\n\r\n\r\nexport const getAllMessages = (id) =>  dispatch => {\r\n   dispatch(setMessageEmpty());\r\n   dispatch(setMessageLoading());\r\n  axios.get(\"http://localhost:5000/getAllMessages\")\r\n  .then(res=> \r\n    dispatch({\r\n        type: GET_MESSAGES,\r\n        payload:res.data\r\n    }))\r\n    .catch(err => \r\n        dispatch({\r\n        }));\r\n};\r\n\r\n\r\n\r\nexport const getUserRooms = () =>  dispatch => {\r\n  dispatch(setMessageLoading());\r\n  axios.get('http://localhost:5000/getUserRooms')\r\n  .then(res=> \r\n    dispatch({\r\n        type: GET_MESSAGE_ROOMS,\r\n        payload:res.data\r\n    }))\r\n    .catch(err => \r\n        dispatch({\r\n        }));\r\n};\r\nexport const setMessageLoading = () =>{\r\n     return{\r\n         type: MESSAGE_LOADING\r\n     }\r\n}\r\nexport const getRoomName = (id) => dispatch =>{\r\n     dispatch({\r\n        type: GET_ROOM_NAME,\r\n        payload: id\r\n    })\r\n}\r\n\r\nexport const setMessageEmpty= () =>{\r\n     return{\r\n         type: CLEAR_MESSAGE\r\n     }\r\n}"]},"metadata":{},"sourceType":"module"}