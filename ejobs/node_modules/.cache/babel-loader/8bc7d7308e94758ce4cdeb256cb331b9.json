{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\AsFreelancer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProjectInF from './ProjectInF';\nimport \"../../Css/AsClient.css\";\nimport Spinner from '../../Spinner.js';\nimport { getAppliedProject } from '../../actions/projectAction.js';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AsFreelancer extends Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.project) {\n      this.setState({\n        project: nextProps.project,\n        auth: nextProps.auth\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.props.getAppliedProject();\n  }\n\n  render() {\n    const {\n      appliedProject,\n      loading\n    } = this.props.project;\n    let Allprojects;\n\n    if (appliedProject === loading) {\n      Allprojects = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (appliedProject.length === 0) {\n      Allprojects = /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No Preject Applied yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this);\n    } else {\n      Allprojects = /*#__PURE__*/_jsxDEV(ProjectInF, {\n        project: appliedProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Allprojects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nAsFreelancer.propTypes = {\n  getAppliedProject: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {\n  getAppliedProject\n})(AsFreelancer);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/AsFreelancer.js"],"names":["React","Component","connect","ProjectInF","Spinner","getAppliedProject","PropTypes","AsFreelancer","componentWillReceiveProps","nextProps","project","setState","auth","componentDidMount","props","render","appliedProject","loading","Allprojects","length","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAEhCO,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAC7B,QAAGA,SAAS,CAACC,OAAb,EAAqB;AACjB,WAAKC,QAAL,CAAc;AACVD,QAAAA,OAAO,EAAED,SAAS,CAACC,OADT;AAEVE,QAAAA,IAAI,EAAEH,SAAS,CAACG;AAFN,OAAd;AAKH;AACP;;AACCC,EAAAA,iBAAiB,GAAE;AAClB,SAAKC,KAAL,CAAWT,iBAAX;AACH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,cAAF;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKH,KAAL,CAAWJ,OAA9C;AAEJ,QAAIQ,WAAJ;;AAEA,QAAIF,cAAc,KAAMC,OAAxB,EAAiC;AAC/BC,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AACD,QAAIF,cAAc,CAACG,MAAf,KAA2B,CAA/B,EAAmC;AACjCD,MAAAA,WAAW,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,gBAAG,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEF;AAArB;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AACG,wBACI;AAAA,gBACKE;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAjCgC;;AAqCrCX,YAAY,CAACa,SAAb,GAAyB;AACvBf,EAAAA,iBAAiB,EAAEC,SAAS,CAACe,IAAV,CAAeC,UADX;AAEvBV,EAAAA,IAAI,EAAEN,SAAS,CAACiB,MAAV,CAAiBD;AAFA,CAAzB;;AAMA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCb,EAAAA,IAAI,EAAEa,KAAK,CAACb,IADsB;AAElCF,EAAAA,OAAO,EAAEe,KAAK,CAACf;AAFmB,CAAZ,CAAxB;;AAIA,eAAeR,OAAO,CAACsB,eAAD,EAAkB;AAAGnB,EAAAA;AAAH,CAAlB,CAAP,CAAgDE,YAAhD,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport ProjectInF from './ProjectInF';\r\nimport \"../../Css/AsClient.css\"\r\nimport Spinner from '../../Spinner.js'\r\nimport { getAppliedProject } from '../../actions/projectAction.js'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AsFreelancer extends Component {\r\n\r\n     componentWillReceiveProps(nextProps){\r\n            if(nextProps.project){\r\n                this.setState({\r\n                    project: nextProps.project,\r\n                    auth: nextProps.auth\r\n\r\n                });\r\n            }\r\n     }\r\n       componentDidMount(){\r\n        this.props.getAppliedProject();\r\n    }\r\n    \r\n    render() {\r\n        const { appliedProject,loading } = this.props.project;\r\n         \r\n    let Allprojects;\r\n\r\n    if (appliedProject ===  loading) {\r\n      Allprojects = <Spinner />;\r\n    }\r\n    if (appliedProject.length ===  0 ) {\r\n      Allprojects = <h3>No Preject Applied yet.</h3>;\r\n    } else {\r\n      Allprojects = <ProjectInF project={appliedProject} />;\r\n    }\r\n        return (\r\n            <div>\r\n                {Allprojects}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nAsFreelancer.propTypes = {\r\n  getAppliedProject: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  project: state.project\r\n});\r\nexport default connect(mapStateToProps, {  getAppliedProject})(AsFreelancer);\r\n"]},"metadata":{},"sourceType":"module"}