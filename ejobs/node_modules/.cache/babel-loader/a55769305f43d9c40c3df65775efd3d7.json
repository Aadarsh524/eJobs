{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken.js';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types'; // Register User\n\nexport const register = (userData, history) => dispatch => {\n  axios.post('http://localhost:5000/register', userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const login = userData => dispatch => {\n  axios.post('http://localhost:5000/login', userData).then(res => {\n    //Save to local storage\n    const {\n      token\n    } = res.data; //Set token to local storage\n\n    localStorage.setItem('jwtToken', token); //set token to auth header\n\n    setAuthToken(token); //Decode token to get user data\n\n    const decoded = jwt_decode(token); //Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //SET login user\n\nconst setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\nexport default setCurrentUser;\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken'); //remove auth header  for future request\n\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/actions/authAction.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","register","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","login","token","localStorage","setItem","decoded","setCurrentUser","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,QAGO,SAHP,C,CAMA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAwBC,QAAQ,IAAI;AACzDR,EAAAA,KAAK,CACJS,IADD,CACM,gCADN,EACwCH,QADxC,EAECI,IAFD,CAEMC,GAAG,IAAGJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFZ,EAGCC,KAHD,CAGOC,GAAG,IACTN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAACF,GAAG,CAACG,QAAJ,CAAaC;AAFd,GAAD,CAJT;AAQF,CATM;AAWP,OAAO,MAAMC,KAAK,GAAIb,QAAD,IAAeE,QAAQ,IAAI;AAC7CR,EAAAA,KAAK,CACJS,IADD,CACM,6BADN,EACqCH,QADrC,EAECI,IAFD,CAEMC,GAAG,IAAG;AACN;AACL,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB,CAFW,CAGX;;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,KAAhC,EAJW,CAKX;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CARW,CASX;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AAGA,GAfD,EAgBCV,KAhBD,CAgBOC,GAAG,IACTN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAjBT;AAqBF,CAtBM,C,CAwBP;;AACC,MAAMM,cAAc,GAAID,OAAO,IAAG;AACjC,SAAM;AACJR,IAAAA,IAAI,EAAEX,gBADF;AAEJY,IAAAA,OAAO,EAAEO;AAFL,GAAN;AAKD,CANA;;AAOD,eAAeC,cAAf;AAGA,OAAO,MAAMC,MAAM,GAAI,MAAMjB,QAAQ,IAAI;AAEvCa,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFuC,CAGvC;;AACAzB,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAO,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CANM","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken.js';\r\nimport jwt_decode from 'jwt-decode';\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER\r\n} from './types';\r\n\r\n\r\n// Register User\r\nexport const register = (userData, history) =>  dispatch => {\r\n   axios\r\n   .post('http://localhost:5000/register', userData)\r\n   .then(res=> history.push(\"/login\"))\r\n   .catch(err => \r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload:err.response.data\r\n    }))\r\n};\r\n\r\nexport const login = (userData) =>  dispatch => {\r\n   axios\r\n   .post('http://localhost:5000/login', userData)\r\n   .then(res=> {\r\n         //Save to local storage\r\n    const { token } = res.data;\r\n    //Set token to local storage\r\n    localStorage.setItem('jwtToken',token);\r\n    //set token to auth header\r\n    setAuthToken(token);\r\n    //Decode token to get user data\r\n    const decoded = jwt_decode(token);\r\n    //Set current user\r\n    dispatch(setCurrentUser(decoded));\r\n\r\n\r\n   })\r\n   .catch(err => \r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    }))\r\n};\r\n\r\n//SET login user\r\n const setCurrentUser =  decoded =>{\r\n  return{\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n\r\n  }\r\n}\r\nexport default setCurrentUser;\r\n\r\n\r\nexport const logout =  () => dispatch => {\r\n \r\n  localStorage.removeItem('jwtToken');\r\n  //remove auth header  for future request\r\n  setAuthToken(false);\r\n  dispatch(setCurrentUser({}));\r\n}\r\n;\r\n"]},"metadata":{},"sourceType":"module"}