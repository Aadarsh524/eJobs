{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\ejobs\\\\ejobs\\\\src\\\\Components\\\\LoggedUser\\\\AsFreelancer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Project from './Project';\nimport \"../../Css/AsClient.css\";\nimport Spinner from '../../Spinner.js';\nimport { showAllProject, getAppliedProject } from '../../actions/projectAction.js';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AsFreelancer extends Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.project) {\n      this.setState({\n        project: nextProps.project,\n        auth: nextProps.auth\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.props.showAllProject();\n    this.props.getClientProject();\n  }\n\n  render() {\n    const {\n      appliedProject,\n      loading\n    } = this.props.project;\n    const {\n      user\n    } = this.props.auth;\n    let Allprojects;\n\n    if (appliedProject === null || loading) {\n      Allprojects = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this);\n    } else {\n      Allprojects = /*#__PURE__*/_jsxDEV(Project, {\n        project: appliedProject,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Allprojects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nAsFreelancer.propTypes = {\n  getAppliedProject: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {\n  showAllProject,\n  getAppliedProject\n})(AsFreelancer);","map":{"version":3,"sources":["D:/Code/ejobs/ejobs/src/Components/LoggedUser/AsFreelancer.js"],"names":["React","Component","connect","Project","Spinner","showAllProject","getAppliedProject","PropTypes","AsFreelancer","componentWillReceiveProps","nextProps","project","setState","auth","componentDidMount","props","getClientProject","render","appliedProject","loading","user","Allprojects","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,cAAT,EAAwBC,iBAAxB,QAAiD,gCAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AAEhCQ,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAC7B,QAAGA,SAAS,CAACC,OAAb,EAAqB;AACjB,WAAKC,QAAL,CAAc;AACVD,QAAAA,OAAO,EAAED,SAAS,CAACC,OADT;AAEVE,QAAAA,IAAI,EAAEH,SAAS,CAACG;AAFN,OAAd;AAKH;AACP;;AACCC,EAAAA,iBAAiB,GAAE;AAClB,SAAKC,KAAL,CAAWV,cAAX;AACA,SAAKU,KAAL,CAAWC,gBAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,cAAF;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKJ,KAAL,CAAWJ,OAA9C;AACC,UAAM;AAAES,MAAAA;AAAF,QAAW,KAAKL,KAAL,CAAWF,IAA5B;AAEL,QAAIQ,WAAJ;;AAEA,QAAIH,cAAc,KAAK,IAAnB,IAA2BC,OAA/B,EAAwC;AACtCE,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,gBAAG,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEH,cAAlB;AAAkC,QAAA,IAAI,EAAEE;AAAxC;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AACG,wBACI;AAAA,gBACKC;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAhCgC;;AAoCrCb,YAAY,CAACc,SAAb,GAAyB;AACvBhB,EAAAA,iBAAiB,EAAEC,SAAS,CAACgB,IAAV,CAAeC,UADX;AAEvBX,EAAAA,IAAI,EAAEN,SAAS,CAACkB,MAAV,CAAiBD;AAFA,CAAzB;;AAMA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCd,EAAAA,IAAI,EAAEc,KAAK,CAACd,IADsB;AAElCF,EAAAA,OAAO,EAAEgB,KAAK,CAAChB;AAFmB,CAAZ,CAAxB;;AAIA,eAAeT,OAAO,CAACwB,eAAD,EAAkB;AAAErB,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAlB,CAAP,CAA+DE,YAA/D,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Project from './Project';\r\nimport \"../../Css/AsClient.css\"\r\nimport Spinner from '../../Spinner.js'\r\nimport { showAllProject,getAppliedProject } from '../../actions/projectAction.js'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AsFreelancer extends Component {\r\n\r\n     componentWillReceiveProps(nextProps){\r\n            if(nextProps.project){\r\n                this.setState({\r\n                    project: nextProps.project,\r\n                    auth: nextProps.auth\r\n\r\n                });\r\n            }\r\n     }\r\n       componentDidMount(){\r\n        this.props.showAllProject();\r\n        this.props.getClientProject();\r\n    }\r\n    \r\n    render() {\r\n        const { appliedProject,loading } = this.props.project;\r\n         const { user } = this.props.auth;\r\n         \r\n    let Allprojects;\r\n\r\n    if (appliedProject === null || loading) {\r\n      Allprojects = <Spinner />;\r\n    } else {\r\n      Allprojects = <Project project={appliedProject} user={user}/>;\r\n    }\r\n        return (\r\n            <div>\r\n                {Allprojects}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nAsFreelancer.propTypes = {\r\n  getAppliedProject: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  project: state.project\r\n});\r\nexport default connect(mapStateToProps, { showAllProject, getAppliedProject})(AsFreelancer);\r\n"]},"metadata":{},"sourceType":"module"}